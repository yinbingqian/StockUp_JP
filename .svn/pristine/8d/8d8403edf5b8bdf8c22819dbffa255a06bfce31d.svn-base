package com.sxit.http;

import java.util.ArrayList;
import java.util.List;

import org.ksoap2.serialization.SoapObject;

import com.sxit.activity.th.item.bean.AskQuestion_ListBean;
import com.sxit.entity.ChatMessage;
import com.sxit.entity.LoginUser;
import com.sxit.entity.UserInfo;
import com.sxit.entity.anwser.Anwser;
import com.sxit.http.AsyncTaskBase.SoapObjectResult;
import com.sxit.utils.EventCache;
import com.sxit.utils.SOAP_UTILS;

public class SoapService implements ISoapService {
	private AsyncTaskBase asynTaskBase = new AsyncTaskBase();
	private SoapRes soapRes = new SoapRes();

	@Override
	public void adminLogin(Object[] property_va) {
		String[] property_nm = { "name", "password" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.ADMINLOGIN);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				LoginUser loginUser = null;
				SoapObject soapchild = (SoapObject) obj.getProperty(0);
				if (soapchild.getProperty("Id").toString().equals("0")) {

				} else {
					loginUser = new LoginUser();
					loginUser.setUserid(soapchild.getProperty("Id").toString());
					loginUser.setGroupid(soapchild.getProperty("GroupId").toString());
					loginUser.setName(soapchild.getProperty("Name").toString());
					loginUser.setPassword(soapchild.getProperty("Password").toString());
					loginUser.setRealname(soapchild.getProperty("RealName").toString());
					loginUser.setMobilephone(soapchild.getProperty("Mobilephone").toString());
					loginUser.setEmail(soapchild.getProperty("Email").toString());
					loginUser.setCrtime(soapchild.getProperty("CrTime").toString());
					loginUser.setIslock(soapchild.getProperty("Islock").toString());
					loginUser.setSex(soapchild.getProperty("Sex").toString());
					loginUser.setOrgid(soapchild.getProperty("Orgid").toString());
					loginUser.setSpecialty(soapchild.getProperty("Specialty").toString());
					loginUser.setResume(soapchild.getProperty("Resume").toString());
					loginUser.setLevel(soapchild.getProperty("Level").toString());
					loginUser.setStatus(soapchild.getProperty("Status").toString());
					loginUser.setMark(soapchild.getProperty("Mark").toString());
					loginUser.setRewardmark(soapchild.getProperty("Rewardmark").toString());
					loginUser.setPaidmark(soapchild.getProperty("Paidmark").toString());
					loginUser.setHeadpic(soapchild.getProperty("HeadPic").toString());
					loginUser.setPtitle(soapchild.getProperty("PTitle").toString());
					loginUser.setOrgname(soapchild.getProperty("OrgName").toString());
				}
				soapRes.setObj(loginUser);
				soapRes.setCode(SOAP_UTILS.METHOD.ADMINLOGIN);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {
				soapRes.setObj(null);
				soapRes.setCode(SOAP_UTILS.METHOD.ADMINLOGIN);
				EventCache.commandActivity.post(soapRes);
			}
		});
	}

	@Override
	public void communReplyAdd(Object[] property_va) {
		String[] property_nm = { "replyid", "replyAbstract", "content", "userId" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.COMMUNREPLYADD);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.COMMUNREPLYADD);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void communicationAdd(Object[] property_va) {
		String[] property_nm = { "title", "content", "userId", "mark", "aging" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.COMMUNICATIONADD);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj.getProperty("CommunicationAddResult"));
				soapRes.setCode(SOAP_UTILS.METHOD.COMMUNICATIONADD);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {
				soapRes.setObj(null);
				soapRes.setCode(SOAP_UTILS.METHOD.COMMUNICATIONADD);
				EventCache.commandActivity.post(soapRes);
			}
		});
	}

	@Override
	public void getAdmin(Object[] property_va) {
		String[] property_nm = { "pagesize", "pageindex" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.GETADMIN);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.GETADMIN);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void getColumns(Object[] property_va) {
		String[] property_nm = { "pagesize", "pageindex" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.GETCOLUMNS);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.GETCOLUMNS);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void getCommunReply(Object[] property_va,final List<Anwser> list) {
		String[] property_nm = { "id" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.GETCOMMUNREPLY);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				System.out.println("-----obj ="+obj);
				SoapObject soapchild = (SoapObject) obj.getProperty(0);
				if (soapchild.getPropertyCount() != 0) {
					int item_count = soapchild.getPropertyCount();
					for (int i = 0; i < item_count; i++) {
						SoapObject soapchildsson = (SoapObject) soapchild.getProperty(i);
						Anwser anwser = new Anwser();
						anwser.setTitle("回复1");
						anwser.setContent_img(null);
						anwser.setMsg_direction(1);
						anwser.setDate(soapchildsson.getProperty("Crtime").toString());
						anwser.setContent(soapchildsson.getProperty("Content").toString());
						anwser.setUser_img(SOAP_UTILS.HEADER_URL + soapchildsson.getProperty("HeadPic").toString());
						anwser.setReplyId(soapchildsson.getProperty("Replyid").toString());//问题id
						anwser.setAnalystId(soapchildsson.getProperty("Id").toString());//回复id(用户查询解答详情)
						anwser.setAnalystId(soapchildsson.getProperty("Userid").toString());
						anwser.setRealName(soapchildsson.getProperty("RealName").toString());
						list.add(anwser);
					}
				}
				System.out.println("----message.size ="+list.size());
				soapRes.setObj(list);
				soapRes.setCode(SOAP_UTILS.METHOD.GETCOMMUNREPLY);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void getCommunReplyAna(Object[] property_va) {
		String[] property_nm = { "id", "AnalystID" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.GETCOMMUNREPLYANA);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.GETCOMMUNREPLYANA);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void getCommunReplyByID(Object[] property_va) {
		String[] property_nm = { "id" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.GETCOMMUNREPLYBYID);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.GETCOMMUNREPLYBYID);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void getCommunication(Object[] property_va) {
		String[] property_nm = { "pagesize", "pageindex", "userid", "status" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.GETCOMMUNICATION);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.GETCOMMUNICATION);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void getCommunicationALL(Object[] property_va, final boolean isPage) {
		String[] property_nm = { "pagesize", "pageindex", "userid" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.GETCOMMUNICATIONALL);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				SoapObject soapchild = (SoapObject) obj.getProperty(0);
				SoapObject soapchids = (SoapObject) soapchild.getProperty(1);
				List<AskQuestion_ListBean> list = new ArrayList<AskQuestion_ListBean>();
				if (soapchids.getPropertyCount() != 0) {
					SoapObject soapchidss = (SoapObject) soapchids.getProperty(0);
					int item_count = soapchidss.getPropertyCount();
					for (int i = 0; i < item_count; i++) {
						SoapObject soapchildsson = (SoapObject) soapchidss.getProperty(i);
						AskQuestion_ListBean bean = new AskQuestion_ListBean();
						bean.setId(soapchildsson.getProperty("id").toString());
						bean.setTitle(soapchildsson.getProperty("title").toString());
						bean.setContent(soapchildsson.getProperty("content").toString());
						bean.setCrtime(soapchildsson.getProperty("crtime").toString());
						bean.setMark(soapchildsson.getProperty("mark").toString());
						bean.setAging(soapchildsson.getProperty("aging").toString());
						bean.setStatus(soapchildsson.getProperty("status").toString());
						bean.setCount(soapchildsson.getProperty("count").toString());
						list.add(bean);
					}
				}
				soapRes.setObj(list);
				soapRes.setCode(SOAP_UTILS.METHOD.GETCOMMUNICATIONALL);
				soapRes.setPage(isPage);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {
				soapRes.setObj(null);
				soapRes.setCode(SOAP_UTILS.METHOD.GETCOMMUNICATIONALL);
				soapRes.setPage(isPage);
				EventCache.commandActivity.post(soapRes);
			}
		});
	}

	@Override
	public void getCommunicationAllUser(Object[] property_va) {
		String[] property_nm = { "pagesize", "pageindex", "analystid" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.GETCOMMUNICATIONALLUSER);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.GETCOMMUNICATIONALLUSER);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void getCommunicationAna(Object[] property_va) {
		String[] property_nm = { "pagesize", "pageindex", "adminid", "flag" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.GETCOMMUNICATIONANA);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.GETCOMMUNICATIONANA);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void getNewsContent(Object[] property_va) {
		String[] property_nm = { "id" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.GETNEWSCONTENT);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.GETNEWSCONTENT);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void getNewsTitle(Object[] property_va) {
		String[] property_nm = { "colid", "pagesize", "pageindex" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.GETNEWSTITLE);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.GETNEWSTITLE);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void interactionHomepage(Object[] property_va) {
		String[] property_nm = { "toUser" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.INTERACTIONHOMEPAGE);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.INTERACTIONHOMEPAGE);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void interactionMessage(Object[] property_va) {
		String[] property_nm = { "toUser", "historyTime" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.INTERACTIONMESSAGE);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.INTERACTIONMESSAGE);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void interactionMessageAna(Object[] property_va) {
		String[] property_nm = { "fromUser", "historyTime" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.INTERACTIONMESSAGEANA);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.INTERACTIONMESSAGEANA);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void interactionMessageByID(Object[] property_va) {
		String[] property_nm = { "ID" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.INTERACTIONMESSAGEBYID);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.INTERACTIONMESSAGEBYID);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void interactionSubmit(Object[] property_va) {
		String[] property_nm = { "fromUser", "toUser", "blogTitle", "blogAbstract", "content", "devType", "infoType", "infoDirection" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.INTERACTIONSUBMIT);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.INTERACTIONSUBMIT);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void updataBestAnswer(Object[] property_va) {
		String[] property_nm = { "id" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.UPDATABESTANSWER);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.UPDATABESTANSWER);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void userInfoLogin(Object[] property_va) {
		String[] property_nm = { "name", "password", "imei" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.USERINFOLOGIN);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				LoginUser loginUser = null;
				SoapObject soapchild = (SoapObject) obj.getProperty(0);
				if (soapchild.getProperty("Id").toString().equals("0")) {

				} else {
					loginUser = new LoginUser();
					loginUser.setUserid(soapchild.getProperty("Id").toString());
					loginUser.setType(soapchild.getProperty("Type").toString());
					loginUser.setSim(soapchild.getProperty("Sim").toString());
					loginUser.setName(soapchild.getProperty("Name").toString());
					loginUser.setPassword(soapchild.getProperty("Password").toString());
					loginUser.setRealname(soapchild.getProperty("RealName").toString());
					loginUser.setSex(soapchild.getProperty("Sex").toString());
					loginUser.setRemark(soapchild.getProperty("Remark").toString());
					loginUser.setIslock(soapchild.getProperty("Islock").toString());
					loginUser.setMark(soapchild.getProperty("Mark").toString());
					loginUser.setRewardmark(soapchild.getProperty("Rewardmark").toString());
					loginUser.setPaidmark(soapchild.getProperty("Paidmark").toString());
					loginUser.setHeadpic(soapchild.getProperty("HeadPic").toString());
					loginUser.setImei(soapchild.getProperty("Imei").toString());
					loginUser.setProvince(soapchild.getProperty("Province").toString());
					loginUser.setCity(soapchild.getProperty("City").toString());
					loginUser.setStock_age(soapchild.getProperty("StockAge").toString());
					loginUser.setStock_style(soapchild.getProperty("StockStyle").toString());
					// loginUser.setCommfree(soapchild.getProperty("CommFree").toString());
					// loginUser.setInteractionfree(soapchild.getProperty("InteractionFree").toString());
				}
				soapRes.setObj(loginUser);
				soapRes.setCode(SOAP_UTILS.METHOD.USERINFOLOGIN);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {
				soapRes.setObj(null);
				soapRes.setCode(SOAP_UTILS.METHOD.USERINFOLOGIN);
				EventCache.commandActivity.post(soapRes);
			}
		});
	}

	@Override
	public void userPayment(Object[] property_va) {
		String[] property_nm = { "userid", "pay" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.USERPAYMENT);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj);
				soapRes.setCode(SOAP_UTILS.METHOD.USERPAYMENT);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {

			}
		});
	}

	@Override
	public void userRegistered(Object[] property_va) {
		String[] property_nm = { "sim", "name", "password", "realName", "sex", "imei", "province", "city", "stockAge", "stockStyle" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.USERREGISTERED);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj.getProperty("UserRegisteredResult"));
				soapRes.setCode(SOAP_UTILS.METHOD.USERREGISTERED);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {
				soapRes.setObj(null);
				soapRes.setCode(SOAP_UTILS.METHOD.USERREGISTERED);
				EventCache.commandActivity.post(soapRes);
			}
		});
	}

	@Override
	public void userPasswordReset(Object[] property_va) {
		String[] property_nm = { "username", "pwd_old","pwd_new" };
		asynTaskBase.setMethod(SOAP_UTILS.METHOD.USERPASSWORDRESET);
		asynTaskBase.setProperty_nm(property_nm);
		asynTaskBase.setProperty_va(property_va);
		asynTaskBase.executeDo(new SoapObjectResult() {

			@Override
			public void soapResult(SoapObject obj) {
				soapRes.setObj(obj.getProperty("UserPasswordResetResult"));
				soapRes.setCode(SOAP_UTILS.METHOD.USERPASSWORDRESET);
				EventCache.commandActivity.post(soapRes);
			}

			@Override
			public void soapError() {
				soapRes.setObj(null);
				soapRes.setCode(SOAP_UTILS.METHOD.USERPASSWORDRESET);
				EventCache.commandActivity.post(soapRes);
			}
		});
	}

}
